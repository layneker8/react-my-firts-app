{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","addCategory","setaddCategory","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","titulo","title","images","fixed_width_small","GifGridItem","className","src","alt","GifGrid","loading","setImages","useEffect","then","useFetchGif","GifExpertApp","setcategory","categories","divApp","document","querySelector","ReactDOM","render"],"mappings":"2LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,KADC,mBACzCC,EADyC,KAC5BC,EAD4B,KAYhD,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAYK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAe,MAIjB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAaU,SAZvB,SAACP,GACnBF,EAAeE,EAAEQ,OAAOF,a,+BCNfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,OAAQF,EAAIG,MACZX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,kBAAkBb,QAXxB,kBAcZM,GAdY,4CAAH,sDCEPQ,EAAc,SAAC,GAAoB,EAAnBL,GAAoB,IAAjBC,EAAgB,EAAhBA,OAAOV,EAAS,EAATA,IAEnC,OACI,sBAAKe,UAAU,OAAf,UACE,qBAAKC,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCHDQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDd,SAACA,GAAc,IAAD,EACZd,mBAAS,CACpCqB,KAAM,GACNc,SAAS,IAH8B,mBACjCP,EADiC,KACzBQ,EADyB,KAexC,OATAC,qBAAU,WACTxB,EAAQC,GAAUwB,MAAK,SAACd,GACvBY,EAAU,CACTf,KAAMG,EACNW,SAAS,SAGT,CAACrB,IAEGc,EDbiBW,CAAYzB,GAA7BO,EADiC,EACjCA,KAAMc,EAD2B,EAC3BA,QACb,OACC,qCACC,6BAAKrB,IACJqB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SACEV,EAAKE,KAAI,SAACC,GACV,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEkBnBe,EA1BM,WAAM,MAGOxC,mBAAS,CAAC,SAHjB,mBAGlBc,EAHkB,KAGR2B,EAHQ,KAQzB,OACE,qCACE,8CACA,uBAEA,cAAC,EAAD,CAAa1C,cAAe0C,IAC5B,6BACE3B,EAASS,KAAI,SAACmB,GAAD,OACX,cAAC,EAAD,CAEA5B,SAAU4B,GADLA,YCjBTC,G,MAASC,SAASC,cAAc,SAEtCC,IAASC,OAAO,cAAC,EAAD,IAAiBJ,K","file":"static/js/main.418975e5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [addCategory, setaddCategory] = useState(\" \");\r\n  const HandleValue = (e) => {\r\n    setaddCategory(e.target.value);\r\n  };\r\n  const HandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (addCategory.trim().length > 2) {\r\n      setCategories((cats) => [addCategory,...cats]);\r\n      setaddCategory('');\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={HandleSubmit}>\r\n      <input type=\"text\" value={addCategory} onChange={HandleValue} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired,\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=0oCXPxgkHfhHhqy9VBmZ2tuXMS9nWc3r`;\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const {data} = await resp.json();\r\n   \r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            titulo: img.title,\r\n            url: img.images?.fixed_width_small.url,\r\n        };\r\n    });\r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,titulo,url}) => {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n          <img src={url} alt={titulo}/>\r\n          <p>{titulo}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGif } from \"../hooks/useFetchGif\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\tconst {data, loading} = useFetchGif(category);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>{category}</h3>\r\n\t\t\t{loading && <p>Cargando...</p>}\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t{data.map((img) => {\r\n\t\t\t\t\treturn <GifGridItem key={img.id} {...img} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGif = (category) => {\r\n\tconst [images, setImages] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then((img) => {\r\n\t\t\tsetImages({\r\n\t\t\t\tdata: img,\r\n\t\t\t\tloading: false,\r\n\t\t\t});\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn images;\r\n};\r\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  // const categories=['Hunter','Batman','Dragon Ball'];\n\n  const [category, setcategory] = useState(['Goku']);\n  // const HandleAdd=(e)=>{\n  //   // setcategory([...category,'HunterXHUnter'])//express\n  //   setcategory(cats=>['HunterXHUnter',...category])\n  // }\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <hr />\n      {/* <button type=\"button\" onClick={HandleAdd}>Agregar</button> */}\n      <AddCategory setCategories={setcategory}/>\n      <ol>{\n        category.map((categories)=>(\n          <GifGrid\n          key={categories} \n          category={categories} />\n        ))\n\n        }</ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './gifExpertApp';\nimport './index.css';\nconst divApp = document.querySelector(\"#app\");\n\nReactDOM.render(<GifExpertApp />,divApp);\n\n\n"],"sourceRoot":""}